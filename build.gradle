apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

applicationName = 'ExampleApplication'
mainClassName = 'com.github.wreulicke.dropwizard.HelloWorldService'
version = '1.0'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile (
       "io.dropwizard:dropwizard-core:$dropwizardVersion",
       "io.dropwizard:dropwizard-hibernate:$dropwizardVersion",
       "io.dropwizard:dropwizard-migrations:$dropwizardVersion",
       "io.dropwizard:dropwizard-auth:$dropwizardVersion",
       'com.h2database:h2:1.4.196'
    )
	compileOnly "org.projectlombok:lombok:1.16.18"
	testCompileOnly "org.projectlombok:lombok:1.16.18"

	compile "org.slf4j:slf4j-api:1.7.24"
	compile "org.slf4j:jul-to-slf4j:1.7.24"
	compile "ch.qos.logback:logback-classic:1.1.7"
    compile "com.amazonaws:aws-java-sdk-kinesis:1.11.181"
    compile 'com.amazonaws:amazon-kinesis-client:1.8.1'
    
	
	compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: '2.8.9'
    testCompile 'junit:junit:4.12'
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.name == "commons-logging") {
			// prefer "jcl-over-slf4j" over "commons-logging":
			details.useTarget "org.slf4j:jcl-over-slf4j:1.7.24"
		}
		if (details.requested.name == "log4j") {
			// prefer "log4j-over-slf4j" over "log4j":
			details.useTarget "org.slf4j:log4j-over-slf4j:1.7.24"
		}
	}
}
	
task migrate(type: JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.github.wreulicke.dropwizard.HelloWorldService'
    args "db", "migrate", "./helloworld.yml"
}

// Configure the run task to start the Dropwizard service
run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
    else args 'server', './helloworld.yml'
}

jar {
    manifest {
        attributes(
            'Implementation-Title': applicationName,
            'Implementation-Version': version,
            'Built-Time': new Date(),
            'Main-Class': mainClassName,
            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

task deps(type: Exec, dependsOn: jar){
    commandLine "jdeps", "-cp", sourceSets.main.runtimeClasspath.asPath, "-R" ,"build/libs/kinesis-sandbox.jar"
}

task depsSummary(type: Exec, dependsOn: jar){
    commandLine "jdeps", "-dotoutput", "build/reports/deps", "-s", "-cp", sourceSets.main.runtimeClasspath.asPath, "-R" ,"build/libs/kinesis-sandbox.jar"
}
